<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
	 This file defines the UnoNotifyAppLaunch target used to notify the DevServer (RemoteControl)
	 when an application has been launched, so that the DevServer can monitor that the launched app
	 connects back in a timely manner.  This is used to detect launch failures and report them to telemetry.
	 
	 This target is intended to be invoked after the application has been built, but before it is launched, by
	 the IDE tooling (e.g. Visual Studio Code, Rider, etc). Is it not required for VisualStudio, which is using
	 a different mechanism to do the same thing. The implementation in this version is in the `AppLaunch` folder
	 of the `Uno.UI.RemoteControl.VS` project.
	 
	 Other IDEs will call this target by specifying the `UnoRemoteControlPort` property using the following command:
	 
	 ```shell
	 dotnet build <app csproj> -t:UnoNotifyAppLaunch -p:TargetFramework=<tfm to launch> -p:NoBuild=true -restore:false -v:d -noLogo -low -p:Ide=<ide info> -p:Plugin=<Uno plugin version> -p:IsDebug=false
	 ```
	 
	 To retrieve the HTTP response content (MVID and target framework info), use -getProperty:
	 
	 ```shell
	 dotnet build <app csproj> -t:UnoNotifyAppLaunch -getProperty:UnoNotifyAppLaunchHttpResponse -p:TargetFramework=<tfm> -p:NoBuild=true -restore:false -p:Ide=<ide> -p:Plugin=<version> -p:IsDebug=false
	 ```
	 -->

	<PropertyGroup>
		<UnoNotifyAppLaunchDependsOn>$(UnoNotifyAppLaunchDependsOn);GetTargetPath</UnoNotifyAppLaunchDependsOn>
	</PropertyGroup>

	<UsingTask TaskName="UnoNotifyAppLaunchToDevServer"
			   TaskFactory="RoslynCodeTaskFactory"
			   AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Port ParameterType="System.String" Required="true"/>
			<TargetPath ParameterType="System.String" Required="true"/>
			<Ide ParameterType="System.String" Required="false"/>
			<Plugin ParameterType="System.String" Required="false"/>
			<IsDebug ParameterType="System.String" Required="false"/>
			<Success ParameterType="System.Boolean" Output="true"/>
			<ResponseContent ParameterType="System.String" Output="true"/>
		</ParameterGroup>
		<Task>
			<Code Type="Class" Language="cs"><![CDATA[
			using System;
			using System.Collections.Generic;
			using System.Net;
			using System.Net.Http;
			using Microsoft.Build.Framework;
			using Microsoft.Build.Utilities;
			
			public sealed class UnoNotifyAppLaunchToDevServer : Task
			{
				[Required] public string Port { get; set; } = string.Empty;
				[Required] public string TargetPath { get; set; } = string.Empty;
				[Required] public string IsDebug { get; set; } = string.Empty;
				public string Ide { get; set; } = string.Empty;
				public string Plugin { get; set; } = string.Empty;
			
				[Output] public bool Success { get; set; }
				[Output] public string ResponseContent { get; set; } = string.Empty;
			
				public override bool Execute()
				{
					// Validate
					if (string.IsNullOrWhiteSpace(Port) || !ushort.TryParse(Port, out var portNum) || portNum == 0)
					{
						Log.LogError("UnoRemoteControlPort must be a valid port number between 1 and 65535.");
						return Success = false;
					}
					if (string.IsNullOrWhiteSpace(TargetPath))
					{
						Log.LogError("TargetPath is required.");
						return Success = false;
					}
			
					var encodedPath = WebUtility.UrlEncode(TargetPath);
			
					var parts = new List<string>();
					void Add(string name, string value)
					{
						if (!string.IsNullOrEmpty(value))
							parts.Add($"{name}={Uri.EscapeDataString(value)}");
					}
			
					Add("ide", Ide);
					Add("plugin", Plugin);
			
					// Normalize IsDebug to "true"/"false" if it's a recognizable bool; otherwise pass as-is.
					if (string.IsNullOrEmpty(IsDebug))
					{
						Log.LogError("IsDebug is required.");
						return Success = false;
					}
			
					if (bool.TryParse(IsDebug, out var b))
						Add("isDebug", b ? "true" : "false");
					else
						Add("isDebug", IsDebug);
			
					var qs = parts.Count > 0 ? "?" + string.Join("&", parts) : string.Empty;
					var url = $"http://localhost:{portNum}/applaunch/asm/{encodedPath}{qs}";
			
					try
					{
						using var client = new HttpClient { Timeout = TimeSpan.FromSeconds(5) };
						var response = client.GetAsync(url).GetAwaiter().GetResult();
			
						Log.LogMessage(MessageImportance.High,
							$"[NotifyDevServer] GET {url} -> {(int)response.StatusCode} {response.ReasonPhrase}");
						
						if (response.IsSuccessStatusCode)
						{
							ResponseContent = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();
							Success = true;
							return true;
						}
						else
						{
							Success = false;
							ResponseContent = string.Empty;
							return false;
						}
					}
					catch (Exception ex)
					{
						Log.LogWarning($"[NotifyDevServer] GET {url} failed: {ex.GetType().Name}: {ex.Message}");
						Success = false;
						ResponseContent = string.Empty;
						return false;
					}
				}
			}
      ]]></Code>
		</Task>
	</UsingTask>

	<Target Name="UnoNotifyAppLaunch"
			DependsOnTargets="$(UnoNotifyAppLaunchDependsOn)"
			Condition="'$(TargetFramework)'!=''">

		<Message Importance="Low"
				 Text="NotifyAppLaunch: TFM=$(TargetFramework)  TargetPath=$(TargetPath)"/>

		<Error Text="UnoRemoteControlPort property must be defined to use UnoNotifyAppLaunch target."
			   Condition="'$(UnoRemoteControlPort)' == ''"/>

		<Error Text="Target assembly file not found: $(TargetPath)"
			   Condition="!Exists('$(TargetPath)')"/>

		<!-- Pass the new properties -->
		<UnoNotifyAppLaunchToDevServer
			Port="$(UnoRemoteControlPort)"
			TargetPath="$(TargetPath)"
			Ide="$(Ide)"
			Plugin="$(Plugin)"
			IsDebug="$(IsDebug)">
			<Output TaskParameter="Success" PropertyName="_UnoLaunchSuccess"/>
			<Output TaskParameter="ResponseContent" PropertyName="UnoNotifyAppLaunchHttpResponse"/>
		</UnoNotifyAppLaunchToDevServer>

		<Error Text="Failed to notify devserver for assembly: $(TargetPath)"
			   Condition="'$(_UnoLaunchSuccess)' != 'True'"/>

		<Message Importance="High"
				 Text="Successfully notified devserver for assembly: $(TargetPath)"
				 Condition="'$(_UnoLaunchSuccess)' == 'True'"/>

		<Message Importance="High"
				 Text="DevServer response: $(UnoNotifyAppLaunchHttpResponse)"
				 Condition="'$(_UnoLaunchSuccess)' == 'True' AND '$(UnoNotifyAppLaunchHttpResponse)' != ''"/>
	</Target>

</Project>
