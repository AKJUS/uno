using System;
using System.Collections.Generic;
using System.Text;

namespace Uno.UI.RemoteControl.HotReload.Messages;

/// <summary>
/// 
/// </summary>
/// <param name="ProjectPath"></param>
/// <param name="MetadataUpdateCapabilities"></param>
/// <param name="MSBuildPropertiesRaw"></param>
/// <param name="EnableMetadataUpdates">Instructs the dev-server to observe the project for changes (on file system) and emit metadata updates.</param>
/// <param name="EnableHotReloadThruDebugger">
/// Instructs the dev-server to send metadata updates to the debugger (i.e. through the IDE channel)
/// instead of sending them directly to the app (using the AssemblyDeltaReload message through the App channel).
/// </param>
/// <param name="HotReloadInfoPath">Path of the HotReloadInfo file generated by the HotReloadInfoTask.</param>
public record ConfigureServer(
	string ProjectPath,
	string[] MetadataUpdateCapabilities,
	string[] MSBuildPropertiesRaw,
	string? HotReloadInfoPath,
	bool EnableMetadataUpdates,
	bool EnableHotReloadThruDebugger)
	: IMessage
{
	public const string Name = nameof(ConfigureServer);

	private Dictionary<string, string>? _msbuildProperties;

	public string Scope => WellKnownScopes.HotReload;

	string IMessage.Name => Name;

	public Dictionary<string, string> MSBuildProperties => _msbuildProperties ??= ParseMSBuildProperties(MSBuildPropertiesRaw);

	public static Dictionary<string, string> ParseMSBuildProperties(string[] rawMSBuildProperties)
	{
		var msbuildPropertiesCache = new Dictionary<string, string>();

		foreach (var property in rawMSBuildProperties)
		{
			var firstEqual = property.IndexOf('=');
			var split = new[] { property.Substring(0, firstEqual), property.Substring(firstEqual + 1) };
			msbuildPropertiesCache.Add(split[0], Encoding.UTF8.GetString(Convert.FromBase64String(split[1])));
		}

		return msbuildPropertiesCache;
	}
}
